// Mocks generated by Mockito 5.3.2 from annotations
// in currency_converter/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:currency_converter/models/currency.dart' as _i7;
import 'package:currency_converter/services/http_service.dart' as _i8;
import 'package:currency_converter/services/money_exchange_api_service.dart'
    as _i6;
import 'package:currency_converter/services/shared_preferences_service.dart'
    as _i9;
import 'package:dio/dio.dart' as _i2;
import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i3.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
      ) as String);
  @override
  _i4.GlobalKey<_i4.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(
        #nestedNavigationKey,
        [index],
      )) as _i4.GlobalKey<_i4.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i3.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<T?>? navigateWithTransition<T>(
    _i4.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i4.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i3.Transition? transitionClass,
    _i3.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateWithTransition,
        [page],
        {
          #opaque: opaque,
          #transition: transition,
          #duration: duration,
          #popGesture: popGesture,
          #id: id,
          #curve: curve,
          #fullscreenDialog: fullscreenDialog,
          #preventDuplicates: preventDuplicates,
          #transitionClass: transitionClass,
          #transitionStyle: transitionStyle,
          #routeName: routeName,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? replaceWithTransition<T>(
    _i4.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i4.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i3.Transition? transitionClass,
    _i3.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #replaceWithTransition,
        [page],
        {
          #opaque: opaque,
          #transition: transition,
          #duration: duration,
          #popGesture: popGesture,
          #id: id,
          #curve: curve,
          #fullscreenDialog: fullscreenDialog,
          #preventDuplicates: preventDuplicates,
          #transitionClass: transitionClass,
          #transitionStyle: transitionStyle,
          #routeName: routeName,
        },
      )) as _i5.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
      ) as bool);
  @override
  void popUntil(
    _i4.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i4.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateTo,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
          #transition: transition,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? navigateToView<T>(
    _i4.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i4.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i3.Transition? transition,
    _i3.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateToView,
        [view],
        {
          #arguments: arguments,
          #id: id,
          #opaque: opaque,
          #curve: curve,
          #duration: duration,
          #fullscreenDialog: fullscreenDialog,
          #popGesture: popGesture,
          #preventDuplicates: preventDuplicates,
          #transition: transition,
          #transitionStyle: transitionStyle,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i4.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #replaceWith,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
          #transition: transition,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearStackAndShow,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #parameters: parameters,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearStackAndShowView<T>(
    _i4.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearStackAndShowView,
        [view],
        {
          #arguments: arguments,
          #id: id,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearTillFirstAndShow,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearTillFirstAndShowView<T>(
    _i4.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearTillFirstAndShowView,
        [view],
        {
          #arguments: arguments,
          #id: id,
        },
      )) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i4.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #pushNamedAndRemoveUntil,
        [routeName],
        {
          #predicate: predicate,
          #arguments: arguments,
          #id: id,
        },
      )) as _i5.Future<T?>?);
}

/// A class which mocks [MoneyExchangeApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoneyExchangeApiService extends _i1.Mock
    implements _i6.MoneyExchangeApiService {
  MockMoneyExchangeApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i7.Currency>> getCurrenciesNamesAndAbbreviations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrenciesNamesAndAbbreviations,
          [],
        ),
        returnValue: _i5.Future<List<_i7.Currency>>.value(<_i7.Currency>[]),
      ) as _i5.Future<List<_i7.Currency>>);
  @override
  _i5.Future<List<_i7.Currency>> getCurrenciesExchangeRates(
          List<String>? currenciesAbbrivations) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrenciesExchangeRates,
          [currenciesAbbrivations],
        ),
        returnValue: _i5.Future<List<_i7.Currency>>.value(<_i7.Currency>[]),
      ) as _i5.Future<List<_i7.Currency>>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i8.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  _i5.Future<_i2.Response<T>> get<T>(
    String? url, {
    Map<String, dynamic>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i5.Future<_i2.Response<T>>.value(_FakeResponse_1<T>(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<T>>);
  @override
  _i5.Future<_i2.Response<T>> post<T>(
    String? url, {
    Map<String, dynamic>? payload,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #payload: payload,
            #headers: headers,
          },
        ),
        returnValue: _i5.Future<_i2.Response<T>>.value(_FakeResponse_1<T>(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #payload: payload,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<T>>);
  @override
  _i5.Future<_i2.Response<T>> put<T>(
    String? url, {
    Map<String, dynamic>? payload,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #payload: payload,
            #headers: headers,
          },
        ),
        returnValue: _i5.Future<_i2.Response<T>>.value(_FakeResponse_1<T>(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #payload: payload,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<T>>);
  @override
  _i5.Future<_i2.Response<T>> patch<T>(
    String? url, {
    Map<String, dynamic>? payload,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #payload: payload,
            #headers: headers,
          },
        ),
        returnValue: _i5.Future<_i2.Response<T>>.value(_FakeResponse_1<T>(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #payload: payload,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<T>>);
  @override
  _i5.Future<_i2.Response<T>> delete<T>(
    String? url, {
    Map<String, dynamic>? payload,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #payload: payload,
            #headers: headers,
          },
        ),
        returnValue: _i5.Future<_i2.Response<T>>.value(_FakeResponse_1<T>(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #payload: payload,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<T>>);
}

/// A class which mocks [SharedPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesService extends _i1.Mock
    implements _i9.SharedPreferencesService {
  MockSharedPreferencesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set saveNewCurrencyAbbrivation(String? currencyAbbreviation) =>
      super.noSuchMethod(
        Invocation.setter(
          #saveNewCurrency,
          currencyAbbreviation,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set removeCurrency(String? currencyAbbreviation) => super.noSuchMethod(
        Invocation.setter(
          #removeCurrency,
          currencyAbbreviation,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void saveToDisk(
    String? key,
    dynamic content,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveToDisk,
          [
            key,
            content,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
